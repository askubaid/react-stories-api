import React, { Component } from 'react';
import PropTypes from 'prop-types';

import Collection from '../../Collection';
import StoriesAPIClient from '../client';


/**
* Collection generated by the Stories-API endpoint.
*/
export default class StoriesAPICollection extends Component {
  static propTypes = {
    /** API Key to interact with the StoriesAPI */
    apiKey: PropTypes.string.isRequired,
    /** Override `StoriesAPI` data fetching to use custom data */
    data: PropTypes.object,
    /** `StoriesAPI` endpoint URL */
    endpoint: PropTypes.string.isRequired,
    /** Current Browsing Page Number */
    page: PropTypes.number,
    /** StoriesAPI collection id */
    id: PropTypes.number.isRequired,
    /** Props to pass to the `Story` component */
    options: PropTypes.object,

  };

  static defaultProps = {
    data: null,
    endpoint: process.env.STORIES_API_URL,
    options: {},
    page: 1,
  };

  constructor(props) {
    super(props);
    const { apiKey, data, page, endpoint } = props;
    this.state = {
      loading: data ? false : true,
      data: data,
      count: null,
      stories: [],
      page: page || 1,
    };

    this.client = new StoriesAPIClient(endpoint, apiKey);
    this.handlePageChange = this.handlePageChange.bind(this);
  };

  componentDidMount() {
    if (!this.state.data) {
      this.setState({ loading: true }, () => {
        this.fetchData(() => {
          this.fetchCount(() => {
            this.fetchStories(() => {
              this.setState({loading: false});
            });
          })
        })
      });
    }
  };

  fetchData(callback) {
    const { id } = this.props;
    return this.client.collection(id, data => {
       this.setState({data: data});
       return callback(data);
     });
  };

  fetchStories(callback) {
    const {  endpoint, id } = this.props;
    const { page } = this.state;
    return this.client.story('', id, page, stories => {
       this.setState({stories: stories});
       return callback(stories);
     });
  };

  fetchCount(callback) {
    const { id } = this.props;
    return this.client.story('count', id, null, ({count}) => {
       this.setState({count: count});
       return callback(count);
     });
  };

  handlePageChange({ selected }) {
    const newPage = selected + 1;
    if (newPage == this.state.page) return;
    this.setState({page: newPage, loading: true}, () => {
      this.fetchStories(() => {
        this.setState({loading: false});
      })
    })
  }

  renderLoading(){
    // TODO (#84): Setup loading
    return <div> LOADING... </div>
  }

  render() {
    const { urlFormatter } = this.props;
    const { count, data, loading, page, options, stories } = this.state;

    return loading ? this.renderLoading() : (
      <Collection
        stories={stories}
        {...data}
        count={count}
        page={page}
        urlFormatter={urlFormatter}
        onPageChange={this.handlePageChange}
        {...options}
      />
    );
  }
};
